
import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart


from config import Config
import keyboards as kb
import google_sheets as gs
from database import (async_session, create_tables, users, orders, applications, viewed_orders,
                        select, update, delete, and_, insert)


logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


storage = MemoryStorage()
bot = Bot(token=Config.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=storage)



class Registration(StatesGroup):
    full_name = State()
    sphere = State()
    bio = State()
    portfolio = State()
    role = State()
    confirm_publication = State()

class OrderCreation(StatesGroup):
    title = State()
    description = State()
    photo = State()

class ProfileEditing(StatesGroup):
    field = State()
    new_value = State()



async def get_user(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    async with async_session() as session:
        result = await session.execute(select(users).where(users.c.user_id == user_id))
        return result.fetchone()

def format_user_profile(user_data) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç."""
    role_map = {
        'worker': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        'employer': '–ó–∞–∫–∞–∑—á–∏–∫',
        'both': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏ –ó–∞–∫–∞–∑—á–∏–∫'
    }
    return (
        f"<b>üë§ –ò–º—è:</b> {user_data.full_name}\n"
        f"<b>üõ†Ô∏è –°—Ñ–µ—Ä–∞:</b> {user_data.sphere}\n"
        f"<b>üìù –û —Å–µ–±–µ:</b> {user_data.bio}\n"
        f"<b>üîó –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ:</b> {user_data.portfolio or '‚Äî'}\n"
        f"<b>üéØ –†–æ–ª—å:</b> {role_map.get(user_data.role, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"<b>‚úàÔ∏è TG:</b> @{user_data.username}"
    )



@dp.message(F.new_chat_members)
async def on_user_joined(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ–±—â–µ–º —á–∞—Ç–µ –≥—Ä—É–ø–ø—ã."""
    for user in message.new_chat_members:
        if not user.is_bot:
            await message.answer(
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, {user.full_name}!\n\n"
                f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤, –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã), "
                f"–Ω–∞–∂–º–∏ –Ω–∞ –º–æ–µ –∏–º—è –∏ –∑–∞–ø—É—Å—Ç–∏ –º–µ–Ω—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–æ–º–∞–Ω–¥–æ–π /start"
                f"–°–æ–∑–¥–∞–Ω–æ @velja297"
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")



@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    user = await get_user(message.from_user.id)
    if user:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã", reply_markup=kb.get_main_menu_keyboard())
    else:
        await state.set_state(Registration.full_name)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Connect Bot! –°–æ–∑–¥–∞–Ω–æ @velja297\n\n–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. "
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–∑–Ω–∞—Ç—å –≤–∞—Å –ª—É—á—à–µ.\n\n<b>–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?</b>",
            reply_markup=types.ReplyKeyboardRemove()
        )


@dp.message(Registration.full_name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(Registration.sphere)
    await message.answer("üõ†Ô∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ñ–µ—Ä—É –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'UI/UX –¥–∏–∑–∞–π–Ω', 'Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ Python').")

@dp.message(Registration.sphere)
async def process_sphere(message: types.Message, state: FSMContext):
    await state.update_data(sphere=message.text)
    await state.set_state(Registration.bio)
    await message.answer("üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ –∏ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ.")

@dp.message(Registration.bio)
async def process_bio(message: types.Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await state.set_state(Registration.portfolio)
    await message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (Behance, GitHub, –ª–∏—á–Ω—ã–π —Å–∞–π—Ç). –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ '-'.")

@dp.message(Registration.portfolio)
async def process_portfolio(message: types.Message, state: FSMContext):
    await state.update_data(portfolio=message.text if message.text != '-' else None)
    await state.set_state(Registration.role)
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å:", reply_markup=kb.get_role_selection_keyboard())

@dp.message(Registration.role)
async def process_role(message: types.Message, state: FSMContext):
    role_map = {
        "–Ø –∏—â—É —Ä–∞–±–æ—Ç—É (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)": "worker",
        "–Ø –∏—â—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ó–∞–∫–∞–∑—á–∏–∫)": "employer",
        "–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ": "both"
    }
    role = role_map.get(message.text)
    if not role:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=kb.get_role_selection_keyboard())
        return

    await state.update_data(role=role)
    await state.set_state(Registration.confirm_publication)
    await message.answer(
        "üöÄ –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à—É –∞–Ω–∫–µ—Ç—É –≤ –æ–±—â—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞?",
        reply_markup=kb.get_confirm_publication_keyboard()
    )

@dp.message(Registration.confirm_publication)
async def process_final_registration(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ Google Sheets."""
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    db_data = {
        'user_id': user_id,
        'username': message.from_user.username,
        'full_name': user_data['full_name'],
        'sphere': user_data['sphere'],
        'bio': user_data['bio'],
        'portfolio': user_data['portfolio'],
        'role': user_data['role'],
        'created_at': datetime.now()
    }

    async with async_session() as session:
        stmt = insert(users).values(db_data)
        await session.execute(stmt)
        await session.commit()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î.")
    await message.answer(
        "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
        reply_markup=kb.get_main_menu_keyboard()
    )


    try:
        await gs.add_user_to_sheet(db_data)
    except Exception as e:
        logger.error(f"GSHEETS –û–®–ò–ë–ö–ê (add_user): {e}")
        if Config.ADMIN_ID:
            await bot.send_message(Config.ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–û—à–∏–±–∫–∞: {e}")

    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –≥—Ä—É–ø–ø—É
    if message.text == "–î–∞, –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å":
        if Config.NETWORKING_GROUP_ID:
            try:
                new_user_profile = await get_user(user_id)
                profile_text = format_user_profile(new_user_profile)
                await bot.send_message( 
                    Config.NETWORKING_GROUP_ID,
                    f"üëã –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!\n\n{profile_text}",
                    message_thread_id=Config.NETWORKING_TOPIC_ID    
                )
                logger.info(f"–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ.")
            except Exception as e:
                logger.error(f"GROUP POST –û–®–ò–ë–ö–ê (–∞–Ω–∫–µ—Ç–∞): {e}")
                if Config.ADMIN_ID:
                    await bot.send_message(Config.ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –≥—Ä—É–ø–ø—É.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n–û—à–∏–±–∫–∞: {e}")
        else:
            logger.warning("NETWORKING_GROUP_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")

    await state.clear()


@dp.message(OrderCreation.photo)
async def process_order_photo(message: types.Message, state: FSMContext):
    photo_id = None
    if message.photo:
        photo_id = message.photo[-1].file_id
    
    order_data = await state.get_data()
    employer = await get_user(message.from_user.id)

    db_data = {
        'employer_id': message.from_user.id,
        'title': order_data['title'],
        'description': order_data['description'],
        'photo_id': photo_id,
        'created_at': datetime.now()
    }

    async with async_session() as session:
        result = await session.execute(insert(orders).values(db_data).returning(orders.c.order_id))
        order_id = result.scalar_one()
        await session.commit()

    logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ–∑–¥–∞–Ω.")
    await message.answer(f"‚úÖ –ó–∞–∫–∞–∑ ¬´{order_data['title']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=kb.get_main_menu_keyboard())


    db_data['order_id'] = order_id
    try:
        await gs.add_order_to_sheet(db_data, employer.username)
    except Exception as e:
        logger.error(f"GSHEETS –û–®–ò–ë–ö–ê (add_order): {e}")
        if Config.ADMIN_ID:
            await bot.send_message(Config.ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ Google Sheets.\n\n–ó–∞–∫–∞–∑: {order_id}\n–û—à–∏–±–∫–∞: {e}")


    if Config.NETWORKING_GROUP_ID:
        try:
            order_text = (
                f"<b>üî• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {db_data['title']}</b>\n\n"
                f"<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{db_data['description']}\n\n"
                f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {employer.full_name} (@{employer.username})\n\n"
                f"<i>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É'.</i>"
            )
            if photo_id:
                await bot.send_photo(Config.NETWORKING_GROUP_ID, photo_id, caption=order_text,
                                     message_thread_id=Config.ORDERS_TOPIC_ID)
            else:
                await bot.send_message(Config.NETWORKING_GROUP_ID, order_text,
                                       message_thread_id=Config.ORDERS_TOPIC_ID)
            logger.info(f"–ó–∞–∫–∞–∑ {order_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ.")
        except Exception as e:
            logger.error(f"GROUP POST –û–®–ò–ë–ö–ê (–∑–∞–∫–∞–∑): {e}")
            if Config.ADMIN_ID:
                await bot.send_message(Config.ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É.\n\n–ó–∞–∫–∞–∑: {order_id}\n–û—à–∏–±–∫–∞: {e}")
    else:
        logger.warning("NETWORKING_GROUP_ID –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞.")

    await state.clear()



@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def handle_my_profile(message: types.Message):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ /start.")
        return

    profile_text = format_user_profile(user)
    visibility = "–í–ö–õ ‚úÖ (–≤–∏–¥–µ–Ω –≤ –ø–æ–∏—Å–∫–µ)" if user.is_active else "–í–´–ö–õ ‚ùå (—Å–∫—Ä—ã—Ç)"
    
    await message.answer(
        f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n{profile_text}\n\n<b>–°—Ç–∞—Ç—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏:</b> {visibility}",
        reply_markup=kb.get_profile_keyboard()
    )


@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É")
async def handle_find_job(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    if user.role not in ['worker', 'both']:
        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å '–ó–∞–∫–∞–∑—á–∏–∫' –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return

    await state.set_state("searching_jobs")
    await message.answer("–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
    await show_next_order(message, state)


@dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_my_orders(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(orders)
            .where(orders.c.employer_id == message.from_user.id)
            .order_by(orders.c.created_at.desc())
        )
        user_orders = result.fetchall()

    if not user_orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π?", reply_markup=kb.get_main_menu_keyboard())
        return

    await message.answer("<b>–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>")
    for order in user_orders:
        status_icon = "üü¢ (–û—Ç–∫—Ä—ã—Ç)" if order.status == 'open' else "üîí (–ó–∞–∫—Ä—ã—Ç)"
        text = (
            f"<b>–ó–∞–∫–∞–∑ #{order.order_id}: {order.title}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {status_icon}\n"
            f"<i>–û–ø–∏—Å–∞–Ω–∏–µ:</i> {order.description[:100]}..."
        )
        is_closed = order.status == 'closed'
        await message.answer(text, reply_markup=kb.get_order_management_keyboard(order.order_id, is_closed))


@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def handle_create_order(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ /start.")
        return
    if user.role not in ['employer', 'both']:
        await message.answer("–í–∞—à–∞ —Ä–æ–ª—å '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å' –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        return
    
    await state.set_state(OrderCreation.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏').", reply_markup=types.ReplyKeyboardRemove())


@dp.message(OrderCreation.title)
async def process_order_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(OrderCreation.description)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É.")

@dp.message(OrderCreation.description)
async def process_order_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(OrderCreation.photo)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫ '-'.")



async def show_next_order(message_or_call: types.Message | types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∑–∞–∫–∞–∑."""
    user_id = message_or_call.from_user.id
    message = message_or_call if isinstance(message_or_call, types.Message) else message_or_call.message

    async with async_session() as session:
     
        viewed_result = await session.execute(
            select(viewed_orders.c.order_id).where(viewed_orders.c.viewer_id == user_id)
        )
        viewed_ids = [row[0] for row in viewed_result]
      
        time_limit = datetime.now() - timedelta(hours=Config.ORDER_LIFETIME_HOURS)
        query = (
            select(orders, users.c.full_name, users.c.username)
            .join(users, orders.c.employer_id == users.c.user_id)
            .where(
                and_(
                    orders.c.status == 'open',
                    orders.c.employer_id != user_id,
                    orders.c.created_at >= time_limit,
                    orders.c.order_id.notin_(viewed_ids)
                )
            )
            .order_by(orders.c.created_at.desc())
            .limit(1)
        )
        result = await session.execute(query)
        order = result.fetchone()

    if order:
        await state.update_data(current_order_id=order.order_id)
      
        async with async_session() as session:
            await session.execute(insert(viewed_orders).values(viewer_id=user_id, order_id=order.order_id))
            await session.commit()
        
        text = (
            f"<b>–ó–∞–∫–∞–∑: {order.title}</b>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{order.description}\n\n"
            f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {order.full_name} (@{order.username})"
        )
        
        if order.photo_id:
            await message.answer_photo(order.photo_id, caption=text, reply_markup=kb.get_job_search_keyboard(order.order_id))
        else:
            await message.answer(text, reply_markup=kb.get_job_search_keyboard(order.order_id))
    else:
        async with async_session() as session:
            await session.execute(delete(viewed_orders).where(viewed_orders.c.viewer_id == user_id))
            await session.commit()
        async with async_session() as session:

            fresh_query = query.where(orders.c.order_id.notin_([])) 
            result = await session.execute(fresh_query)
            order = result.fetchone()

        if order:
            await message.answer("–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é –∏—Ö –∑–∞–Ω–æ–≤–æ.")
            await show_next_order(message_or_call, state) # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
        else:
            await state.clear()
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!", reply_markup=kb.get_main_menu_keyboard())

@dp.callback_query(F.data.startswith('apply_'))
async def apply_for_job(call: types.CallbackQuery, state: FSMContext):
    order_id = int(call.data.split('_')[1])
    worker = await get_user(call.from_user.id)
    
    async with async_session() as session:

        result = await session.execute(select(orders).where(orders.c.order_id == order_id))
        order = result.fetchone()

    if not order or not worker:
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–∫–∞–∑ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return


    try:
        profile_text = format_user_profile(worker)
        await bot.send_message(
            order.employer_id,
            f"‚úâÔ∏è <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ ¬´{order.title}¬ª!</b>\n\n"
            f"–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:\n{profile_text}"
        )
        await call.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É!", show_alert=True)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫ –æ—Ç {worker.user_id} –Ω–∞ –∑–∞–∫–∞–∑ {order_id}: {e}")
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.", show_alert=True)
    

    await call.message.delete()
    await show_next_order(call, state)

@dp.callback_query(F.data == 'skip_order')
async def skip_job(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await show_next_order(call, state)

@dp.callback_query(F.data == 'stop_search')
async def stop_search(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.delete()
    await call.message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=kb.get_main_menu_keyboard())




@dp.callback_query(F.data.startswith('close_order_'))
async def close_order(call: types.CallbackQuery):
    order_id = int(call.data.split('_')[2])
    async with async_session() as session:
        stmt = update(orders).where(and_(orders.c.order_id == order_id, orders.c.employer_id == call.from_user.id)).values(status='closed')
        await session.execute(stmt)
        await session.commit()
    await call.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –∑–∞–∫—Ä—ã—Ç. –û–Ω –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ.")
    await call.answer()

@dp.callback_query(F.data.startswith('reopen_order_'))
async def reopen_order(call: types.CallbackQuery):
    order_id = int(call.data.split('_')[2])
    async with async_session() as session:
        stmt = update(orders).where(and_(orders.c.order_id == order_id, orders.c.employer_id == call.from_user.id)).values(status='open')
        await session.execute(stmt)
        await session.commit()
    await call.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.")
    await call.answer()

@dp.callback_query(F.data.startswith('delete_order_'))
async def delete_order_prompt(call: types.CallbackQuery):
    order_id = int(call.data.split('_')[2])
    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ</b> —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?\n"
        "–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ (–æ—Ç–∫–ª–∏–∫–∏ –∏ —Ç.–¥.) —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=kb.get_confirm_delete_keyboard(order_id)
    )
    await call.answer()

@dp.callback_query(F.data.startswith('confirm_delete_'))
async def confirm_delete_order(call: types.CallbackQuery):
    order_id = int(call.data.split('_')[2])
    async with async_session() as session:

        stmt = delete(orders).where(and_(orders.c.order_id == order_id, orders.c.employer_id == call.from_user.id))
        await session.execute(stmt)
        await session.commit()
    await call.message.edit_text(f"–ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω.")
    await call.answer("–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω.")

@dp.callback_query(F.data == 'cancel_delete')
async def cancel_delete_order(call: types.CallbackQuery):
    await call.message.delete()
    await call.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


@dp.callback_query(F.data == "edit_profile")
async def handle_edit_profile(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    await call.message.edit_text(
        "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=kb.get_edit_profile_keyboard()
    )
    await call.answer()

@dp.callback_query(F.data == "back_to_profile")
async def handle_back_to_profile(call: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è."""
    await state.clear()
    await call.message.delete()
    await handle_my_profile(call.message) 
    await call.answer()

@dp.callback_query(F.data == "toggle_visibility")
async def handle_toggle_visibility(call: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è."""
    user = await get_user(call.from_user.id)
    new_status = not user.is_active

    async with async_session() as session:
        await session.execute(
            update(users).where(users.c.user_id == call.from_user.id).values(is_active=new_status)
        )
        await session.commit()
    
    await call.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å {'–≤–∏–¥–µ–Ω' if new_status else '—Å–∫—Ä—ã—Ç'} –≤ –ø–æ–∏—Å–∫–µ.")
    

    await call.message.delete()
    await handle_my_profile(call.message)

@dp.callback_query(F.data.startswith("edit_"))
async def select_field_to_edit(call: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è."""
    field = call.data.split("_")[1]
    
    prompts = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        "sphere": "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:",
        "bio": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ '–û —Å–µ–±–µ':",
        "portfolio": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ (–∏–ª–∏ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
        "role": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –Ω–æ–≤—É—é —Ä–æ–ª—å:"
    }

    await state.set_state(ProfileEditing.new_value)
    await state.update_data(field_to_edit=field)
    
    if field == "role":
        await call.message.answer(prompts[field], reply_markup=kb.get_role_selection_keyboard())
    else:
        await call.message.answer(prompts[field], reply_markup=types.ReplyKeyboardRemove())
    
    await call.message.delete()
    await call.answer()

@dp.message(ProfileEditing.new_value)
async def process_new_profile_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î."""
    data = await state.get_data()
    field = data["field_to_edit"]
    
    value = message.text
    

    if field == "role":
        role_map = {
            "–Ø –∏—â—É —Ä–∞–±–æ—Ç—É (–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)": "worker",
            "–Ø –∏—â—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–ó–∞–∫–∞–∑—á–∏–∫)": "employer",
            "–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ": "both"
        }
        role = role_map.get(message.text)
        if not role:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", reply_markup=kb.get_role_selection_keyboard())
            return
        value = role

    if field == "portfolio" and value == "-":
        value = None
        
    async with async_session() as session:
        await session.execute(
            update(users).where(users.c.user_id == message.from_user.id).values({field: value})
        )
        await session.commit()

    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=kb.get_main_menu_keyboard())
    
    await state.clear()
    await handle_my_profile(message) 

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await create_tables() 
    async with async_session() as session:
        await session.execute(delete(viewed_orders))
        await session.commit()
    
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
